
    @Override
    public String getMostPopularName(Collection<Student> students) {
        return students.stream().collect(Collectors.groupingBy(Student::getFirstName,
                        Collectors.mapping(Student::getGroup, Collectors.toSet()))).entrySet().stream()
                .max(Comparator.<Map.Entry<String, Set<GroupName>>>comparingLong(entry -> entry.getValue().size()).thenComparing(Map.Entry::getKey))
                .map(Map.Entry::getKey).orElse("");
    }

    private <R> List<R> getByIndices(Collection<Student> students, int[] indices, Function<Student, R> function) {
        return Arrays.stream(indices).mapToObj(students.stream().toList()::get).map(function).toList();
    }

    @Override
    public List<String> getFirstNames(Collection<Student> students, int[] indices) {
        return getByIndices(students, indices, Student::getFirstName);
    }

    @Override
    public List<String> getLastNames(Collection<Student> students, int[] indices) {
        return getByIndices(students, indices, Student::getLastName);
    }

    @Override
    public List<GroupName> getGroups(Collection<Student> students, int[] indices) {
        return getByIndices(students, indices, Student::getGroup);
    }

    @Override
    public List<String> getFullNames(Collection<Student> students, int[] indices) {
        return getByIndices(students, indices, getFullName);
    }